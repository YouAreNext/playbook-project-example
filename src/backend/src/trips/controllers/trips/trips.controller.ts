import { Body, Controller, Get, HttpCode, HttpStatus, Param, Post, Query } from '@nestjs/common';
import { ApiAcceptedResponse, ApiOkResponse, ApiOperation, ApiParam, ApiQuery, ApiTags } from '@nestjs/swagger';
import { CreateTripDto } from '../../models/dto/create-trip.dto.js';
import { ListTripsQueryDto } from '../../models/dto/list-trips-query.dto.js';
import { TripCreationView } from '../../models/view/trip-creation.view.js';
import { TripDetailView } from '../../models/view/trip-detail.view.js';
import { TripListView } from '../../models/view/trip-list.view.js';
import { TripsService } from '../../services/trips/trips.service.js';

/**
 * TripsController exposes trip endpoints for the Localize application.
 */
@ApiTags('Trips')
@Controller('trips')
export class TripsController {
  constructor(private readonly tripsService: TripsService) {}

  /**
   * createTrip handles trip generation requests and returns task metadata.
   */
  @Post()
  @HttpCode(HttpStatus.ACCEPTED)
  @ApiOperation({ summary: 'Queue an AI-generated trip based on user prompt.' })
  @ApiAcceptedResponse({ description: 'Trip generation request accepted.', type: TripCreationView })
  createTrip(@Body() dto: CreateTripDto): Promise<TripCreationView> {
    return this.tripsService.createTrip(dto);
  }

  /**
   * getTrips returns a paginated list of trips.
   */
  @Get()
  @ApiOperation({ summary: 'List trips generated by the current user.' })
  @ApiQuery({ name: 'page', required: false, type: Number, description: 'Page number starting from 1.' })
  @ApiQuery({ name: 'limit', required: false, type: Number, description: 'Items per page, maximum 50.' })
  @ApiOkResponse({ description: 'Paginated trips list.', type: TripListView })
  getTrips(@Query() query: ListTripsQueryDto): Promise<TripListView> {
    return this.tripsService.listTrips(query);
  }

  /**
   * getAdminSmokeTest exposes a smoke test endpoint for monitoring.
   */
  @Get('admin/test')
  @ApiOperation({ summary: 'Execute trips domain smoke test.' })
  @ApiOkResponse({ description: 'Smoke test response.', schema: { type: 'string', example: 'Trips service ready' } })
  getAdminSmokeTest(): string {
    return this.tripsService.getAdminSmokeTest();
  }

  /**
   * getTrip exposes detailed trip information for a single trip.
   */
  @Get(':tripId')
  @ApiOperation({ summary: 'Retrieve detailed information for a single trip.' })
  @ApiParam({ name: 'tripId', description: 'Trip identifier.', type: String, format: 'uuid' })
  @ApiOkResponse({ description: 'Detailed trip view.', type: TripDetailView })
  getTrip(@Param('tripId') tripId: string): Promise<TripDetailView> {
    return this.tripsService.findTrip(tripId);
  }
}
